# Collection of Testcases for Ramath
# @(#) $Id: matrix.tests 955 2012-06-05 07:22:59Z gfis $
# 2015-03-23, Dr. Georg Fischer: extracted from siomple.tests
#-----------------------------------
# Caution:
# (1) Adjust the following line: URL where Ramath was deployed
URL=http://localhost:8080/ramath/servlet
# (2) Adjust the following line: default commandline arguments
ARGS=
#======================================================================
PACKAGE=org.teherba.ramath

# ProgramGenerator

TEST PG01 m2pyth
CALL ProgramGenerator -w 3 -l 3 -n m2pyth
MAKE progen

TEST PG02 m2comp
CALL ProgramGenerator -w 3 -l 3 -v "[a^2+b^2,2*a*b,a^2-b^2]"                       -v "[5,3,4]"      -n \
                                -p "p^2 = q^2 + r^2" m2opts 
MAKE progen

# (a^2 + b^2)^3 = (a^3 - 3*a*b^2)^2 + (3*a^2*b - b^3)^2
TEST PG03 m2opts
CALL ProgramGenerator -w 3 -l 5 -v "[a^2 + b^2, (a^3 - 3*a*b^2), (3*a^2*b - b^3)]" -v "[5, 2, 11]"   \
                                -p "p^3 = q^2 + r^2" m2opts
MAKE progen

TEST PG13 m2opts
CALL ProgramGenerator -w 3 -l 5 -v "[a^2 + b^2, (a^3 - 3*a*b^2), (3*a^2*b - b^3)]" -v "[13,9,46]"    -n \
                                -p "p^3 = q^2 + r^2" m2opts
MAKE progen

# (a^2 + b^2)^4 = (a^4 - 6*a^2*b^2 + b^4)^2 + (4*a^3*b - 4*a*b^3)^2
TEST PG04 m2opts
CALL ProgramGenerator -w 3 -l 4 -v "[a^2+b^2,a^4-6*a^2*b^2+b^4,4*a^3*b-4*a*b^3]"   -v "[5,7,24]"     -n \
                                -p "p^4 = q^2 + r^2" m2opts 
MAKE progen

TEST PG14 m2opts
CALL ProgramGenerator -w 3 -l 6 -v "[a^2+b^2,a^4-6*a^2*b^2+b^4,4*a^3*b-4*a*b^3]"   -v "[5,7,24]"     -n \
                                -p "p^4 = q^2 + r^2" m2opts 
MAKE progen

TEST PG24 m2opts
CALL ProgramGenerator -w 3 -l 4 -v "[a^2+b^2,a^4-6*a^2*b^2+b^4,4*a^3*b-4*a*b^3]"   -v "[13,119,120]" -n \
                                -p "p^4 = q^2 + r^2" m2opts 
MAKE progen

# MatrixExhauster
#-----------
# Pythagoras

TEST MX01 m2 Barning's, Price's and Barning's flipped
CALL MatrixExhauster m2 -l 4

TEST MX02 m2 6
CALL MatrixExhauster m2 -l 6

# TEST MX03 m2 10
# CALL MatrixExhauster m2 -l 10

TEST MX04 m3 4
CALL MatrixExhauster m3 -l 3

TEST MX05 v2 6
CALL MatrixExhauster v2 -l 6

TEST MX06 v2 9
CALL MatrixExhauster v2 -l 9

TEST MX07 m2comp 2
# from AM02
CALL MatrixExhauster m2comp -l 3 -p "(a11*u^2+a13*u^2+2*a12*u*v-a11*v^2+a13*v^2)^2 + (a21*u^2+a23*u^2+2*a22*u*v-a21*v^2+a23*v^2)^2 = (a31*u^2+a33*u^2+2*a32*u*v-a31*v^2+a33*v^2)^2"

TEST MX08 m2comp 3
# from AM03
CALL MatrixExhauster m2comp -l 8 -p "(a13*u^2+a11*u^3+3*a12*u^2*v+a13*v^2-3*a11*u*v^2-a12*v^3)^2 + (a23*u^2+a21*u^3+3*a22*u^2*v+a23*v^2-3*a21*u*v^2-a22*v^3)^2 = (a33*u^2+a31*u^3+3*a32*u^2*v+a33*v^2-3*a31*u*v^2-a32*v^3)^3"

TEST MX09 m2comp 4
# from AM04
CALL MatrixExhauster m2comp -l 8 -p "(a13*u^2+a11*u^4+4*a12*u^3*v+a13*v^2-6*a11*u^2*v^2-4*a12*u*v^3+a11*v^4)^2 + (a23*u^2+a21*u^4+4*a22*u^3*v+a23*v^2-6*a21*u^2*v^2-4*a22*u*v^3+a21*v^4)^2 = (a33*u^2+a31*u^4+4*a32*u^3*v+a33*v^2-6*a31*u^2*v^2-4*a32*u*v^3+a31*v^4)^4"

TEST EC20 
CALL MatrixExhauster ec221 -l 4 -v [1,0,1]
TEST EC21 
CALL MatrixExhauster ec221 -l 4 -v [3,4,5]
TEST EC22 
CALL MatrixExhauster ec221 -l 8 -v [3,4,5]
TEST EC22P perms
CALL linear.MatrixTester -perms test/EC22.this.tst


TEST EC30 
CALL MatrixExhauster ec331 -l 3 -v [1,0,0,1]
TEST EC31 
CALL MatrixExhauster ec331 -l 3 -v [3,4,5,6]
TEST EC32 
CALL MatrixExhauster ec331 -l 4 -v [3,4,5,6]
TEST EC33            ec340 -l 2
CALL MatrixExhauster ec340 -l 2 -v [6,-3,-4,-5]
TEST EC33P perms
CALL linear.MatrixTester -perms test/EC33.this.tst
TEST EC34P perms
CALL linear.MatrixTester -perms test/EC34.this.tst

TEST CH01 
CALL linear.MatrixTester -chain [[0,-2,1,-2],[-2,0,-2,1],[2,1,2,0],[-2,-1,-1,1]] [6,-3,-4,-5] 4 0
TEST CH02 
CALL linear.MatrixTester -chain [[0,-2,1,-2],[-2,0,-2,1],[2,1,2,0],[-2,-1,-1,1]] [6,-3,-5,-4] 4 0
TEST CH03 
CALL linear.MatrixTester -chain [[0,-2,1,-2],[-2,0,-2,1],[2,1,2,0],[-2,-1,-1,1]] [6,-4,-3,-5] 4 0
TEST CH04 
CALL linear.MatrixTester -chain [[0,-2,1,-2],[-2,0,-2,1],[2,1,2,0],[-2,-1,-1,1]] [6,-4,-5,-3] 4 0
TEST CH05 
CALL linear.MatrixTester -chain [[0,-2,1,-2],[-2,0,-2,1],[2,1,2,0],[-2,-1,-1,1]] [6,-5,-3,-4] 4 0
TEST CH06 
CALL linear.MatrixTester -chain [[0,-2,1,-2],[-2,0,-2,1],[2,1,2,0],[-2,-1,-1,1]] [6,-5,-4,-3] 4 0

# test/EC39.this.tst:[[1,3,0,-1],[2,3,2,0],[-4,-4,0,-5],[4,3,3,3]],det=17 [19,-3,-18,-10], chain 2 => [20,-7,-14,-17] => [16,-9,33,-34] ??
TEST CH07
CALL linear.MatrixTester -chain [[0,-4,1,-4],[1,4,0,4],[-5,0,-5,1],[5,1,5,0]] [19,-18,-10,-3] 4 0

# EC35.this.tst:[[0,-2,-2,1],[1,3,2,-1],[-2,-1,1,-1],[2,1,0,2]],det=1 [6,-3,-4,-5], chain 8 => [9,-6,-8,-1] => [27,-24,-19,10] =>
TEST CI01 chain with inverted matrix 
CALL symbolic.PolyMatrix -mult [[9,7,4,1],[-8,-6,-4,-1],[5,4,3,1],[-5,-4,-2,0]] [6,-3,-4,-5]
TEST CI02 chain with inverted matrix 
CALL symbolic.PolyMatrix -mult [[9,7,4,1],[-8,-6,-4,-1],[5,4,3,1],[-5,-4,-2,0]] [9,-6,-8,-1]
TEST CI03 chain with inverted matrix 
CALL symbolic.PolyMatrix -mult [[9,7,4,1],[-8,-6,-4,-1],[5,4,3,1],[-5,-4,-2,0]] [12,-9,1,-10]

TEST CM01 chain with inverted matrix
CALL linear.MatrixTester  -chain [[9,7,4,1],[-8,-6,-4,-1],[5,4,3,1],[-5,-4,-2,0]] [9,-6,-8,-1] 4 0

TEST AM01 multiply abstract
CALL symbolic.PolyMatrix -mult [[-6,-8,-4,-1],[7,9,4,1],[4,5,3,1],[-4,-5,-2,0]] [a,b,c,d]

TEST AM02 multiply abstract Pythagoras
CALL symbolic.PolyMatrix -mult [[m11,m12,m13],[m21,m22,m23],[m31,m32,m33]] [a^2-b^2],[2*a*b],[a^2+b^2]

TEST AM03 multiply abstract Composition^3
CALL symbolic.PolyMatrix -mult [[a11,a12,a13],[a21,a22,a23],[a31,a32,a33]] [u^3-3*u*v^2],[3*u^2*v-v^3],[u^2+v^2]

TEST AM04 multiply abstract Composition^4
CALL symbolic.PolyMatrix -mult [[a11,a12,a13],[a21,a22,a23],[a31,a32,a33]] [u^4-6*u^2*v^2+v^4],[4*u^3*v-4*u*v^3],[u^2+v^2]

TEST EC33M 
CALL MatrixExhauster ec340 -l 2 -v [6,-5,-3,-4]

TEST EC34            ec340 -l 3
CALL MatrixExhauster ec340 -l 3 -v [6,-3,-4,-5]
# chain 8, fact 1 [[3,1,2,-1],[1,3,-1,2],[2,1,2,0],[1,2,0,2]] [6,-3,-4,-5] => [12,-9,1,-10] => [39,-36,17,-26] => [141,-138,76,-85] => [522,-519,296,-305] => [1944,-1941,1117,-1126] => [7251,-7248,4181,-4190] => [27057,-27054,15616,-15625] => [100974,-100971,58292,-58301]
#      b=3-a && d=-9-c =>  a^3+(3-a)^3+c^3 +(-9-c)^3
#      (3*a+b+2*c-d)^3 + (a+3*b-c+2*d)^3 + (2*a+b+2*c+0*d)^3 + (a+2*b+0*c+2*d)^3 - a^3 - b^3 - c^3 - d^3 subst(b=3-a && d=-9-c) => 0
# chain 8, fact 1 [[3,1,2,-1],[1,3,-1,2],[2,1,2,0],[-2,-1,-1,1]] [6,-3,-4,-5] => [12,-9,1,-10] => [39,-36,17,-26] => [141,-138,76,-85] => [522,-519,296,-305] => [1944,-1941,1117,-1126] => [7251,-7248,4181,-4190] => [27057,-27054,15616,-15625] => [100974,-100971,58292,-58301]
# chain 8, fact 1 [[3,1,2,-1],[1,3,-1,2],[-1,-2,1,-1],[1,2,0,2]] [6,-3,-4,-5] => [12,-9,1,-10] => [39,-36,17,-26] => [141,-138,76,-85] => [522,-519,296,-305] => [1944,-1941,1117,-1126] => [7251,-7248,4181,-4190] => [27057,-27054,15616,-15625] => [100974,-100971,58292,-58301]
# chain 8, fact 1 [[3,1,2,-1],[1,3,-1,2],[-1,-2,1,-1],[-2,-1,-1,1]] [6,-3,-4,-5] => [12,-9,1,-10] => [39,-36,17,-26] => [141,-138,76,-85] => [522,-519,296,-305] => [1944,-1941,1117,-1126] => [7251,-7248,4181,-4190] => [27057,-27054,15616,-15625] => [100974,-100971,58292,-58301]
#--
# chain 8, fact 1 [[3,1,2,-1],[-2,0,-2,1],[2,1,2,0],[1,2,0,2]] [6,-3,-4,-5] => [12,-9,1,-10] => [39,-36,17,-26] => [141,-138,76,-85] => [522,-519,296,-305] => [1944,-1941,1117,-1126] => [7251,-7248,4181,-4190] => [27057,-27054,15616,-15625] => [100974,-100971,58292,-58301]
# chain 8, fact 1 [[3,1,2,-1],[-2,0,-2,1],[2,1,2,0],[-2,-1,-1,1]] [6,-3,-4,-5] => [12,-9,1,-10] => [39,-36,17,-26] => [141,-138,76,-85] => [522,-519,296,-305] => [1944,-1941,1117,-1126] => [7251,-7248,4181,-4190] => [27057,-27054,15616,-15625] => [100974,-100971,58292,-58301]
# chain 8, fact 1 [[3,1,2,-1],[-2,0,-2,1],[-1,-2,1,-1],[1,2,0,2]] [6,-3,-4,-5] => [12,-9,1,-10] => [39,-36,17,-26] => [141,-138,76,-85] => [522,-519,296,-305] => [1944,-1941,1117,-1126] => [7251,-7248,4181,-4190] => [27057,-27054,15616,-15625] => [100974,-100971,58292,-58301]
# chain 8, fact 1 [[3,1,2,-1],[-2,0,-2,1],[-1,-2,1,-1],[-2,-1,-1,1]] [6,-3,-4,-5] => [12,-9,1,-10] => [39,-36,17,-26] => [141,-138,76,-85] => [522,-519,296,-305] => [1944,-1941,1117,-1126] => [7251,-7248,4181,-4190] => [27057,-27054,15616,-15625] => [100974,-100971,58292,-58301]
#------------
# chain 8, fact 1 [[3,1,-1,2],[1,3,2,-1],[1,2,2,0],[2,1,0,2]] [6,-3,-4,-5] => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]
# chain 8, fact 1 [[3,1,-1,2],[1,3,2,-1],[1,2,2,0],[-1,-2,-1,1]] [6,-3,-4,-5] => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]
# chain 8, fact 1 [[3,1,-1,2],[1,3,2,-1],[-2,-1,1,-1],[2,1,0,2]] [6,-3,-4,-5] => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]
# chain 8, fact 1 [[3,1,-1,2],[1,3,2,-1],[-2,-1,1,-1],[-1,-2,-1,1]] [6,-3,-4,-5] => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]
#--
# chain 8, fact 1 [[3,1,-1,2],[-2,0,1,-2],[1,2,2,0],[2,1,0,2]] [6,-3,-4,-5] => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]
# chain 8, fact 1 [[3,1,-1,2],[-2,0,1,-2],[1,2,2,0],[-1,-2,-1,1]] [6,-3,-4,-5] => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]
# chain 8, fact 1 [[3,1,-1,2],[-2,0,1,-2],[-2,-1,1,-1],[2,1,0,2]] [6,-3,-4,-5] => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]
# chain 8, fact 1 [[3,1,-1,2],[-2,0,1,-2],[-2,-1,1,-1],[-1,-2,-1,1]] [6,-3,-4,-5] => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]
#------------
# chain 8, fact 1 [[0,-2,1,-2],[1,3,-1,2],[2,1,2,0],[1,2,0,2]] [6,-3,-4,-5] => [12,-9,1,-10] => [39,-36,17,-26] => [141,-138,76,-85] => [522,-519,296,-305] => [1944,-1941,1117,-1126] => [7251,-7248,4181,-4190] => [27057,-27054,15616,-15625] => [100974,-100971,58292,-58301]
# chain 8, fact 1 [[0,-2,1,-2],[1,3,-1,2],[2,1,2,0],[-2,-1,-1,1]] [6,-3,-4,-5] => [12,-9,1,-10] => [39,-36,17,-26] => [141,-138,76,-85] => [522,-519,296,-305] => [1944,-1941,1117,-1126] => [7251,-7248,4181,-4190] => [27057,-27054,15616,-15625] => [100974,-100971,58292,-58301]
# chain 8, fact 1 [[0,-2,1,-2],[1,3,-1,2],[-1,-2,1,-1],[1,2,0,2]] [6,-3,-4,-5] => [12,-9,1,-10] => [39,-36,17,-26] => [141,-138,76,-85] => [522,-519,296,-305] => [1944,-1941,1117,-1126] => [7251,-7248,4181,-4190] => [27057,-27054,15616,-15625] => [100974,-100971,58292,-58301]
# chain 8, fact 1 [[0,-2,1,-2],[1,3,-1,2],[-1,-2,1,-1],[-2,-1,-1,1]] [6,-3,-4,-5] => [12,-9,1,-10] => [39,-36,17,-26] => [141,-138,76,-85] => [522,-519,296,-305] => [1944,-1941,1117,-1126] => [7251,-7248,4181,-4190] => [27057,-27054,15616,-15625] => [100974,-100971,58292,-58301]
#--
# chain 8, fact 1 [[0,-2,1,-2],[-2,0,-2,1],[2,1,2,0],[1,2,0,2]] [6,-3,-4,-5] => [12,-9,1,-10] => [39,-36,17,-26] => [141,-138,76,-85] => [522,-519,296,-305] => [1944,-1941,1117,-1126] => [7251,-7248,4181,-4190] => [27057,-27054,15616,-15625] => [100974,-100971,58292,-58301]
# chain 8, fact 1 [[0,-2,1,-2],[-2,0,-2,1],[2,1,2,0],[-2,-1,-1,1]] [6,-3,-4,-5] => [12,-9,1,-10] => [39,-36,17,-26] => [141,-138,76,-85] => [522,-519,296,-305] => [1944,-1941,1117,-1126] => [7251,-7248,4181,-4190] => [27057,-27054,15616,-15625] => [100974,-100971,58292,-58301]
# chain 8, fact 1 [[0,-2,1,-2],[-2,0,-2,1],[-1,-2,1,-1],[1,2,0,2]] [6,-3,-4,-5] => [12,-9,1,-10] => [39,-36,17,-26] => [141,-138,76,-85] => [522,-519,296,-305] => [1944,-1941,1117,-1126] => [7251,-7248,4181,-4190] => [27057,-27054,15616,-15625] => [100974,-100971,58292,-58301]
# chain 8, fact 1 [[0,-2,1,-2],[-2,0,-2,1],[-1,-2,1,-1],[-2,-1,-1,1]] [6,-3,-4,-5] => [12,-9,1,-10] => [39,-36,17,-26] => [141,-138,76,-85] => [522,-519,296,-305] => [1944,-1941,1117,-1126] => [7251,-7248,4181,-4190] => [27057,-27054,15616,-15625] => [100974,-100971,58292,-58301]
#------------
# chain 8, fact 1 [[0,-2,-2,1],[1,3,2,-1],[1,2,2,0],[2,1,0,2]] [6,-3,-4,-5] => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]
# chain 8, fact 1 [[0,-2,-2,1],[1,3,2,-1],[1,2,2,0],[-1,-2,-1,1]] [6,-3,-4,-5] => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]
# chain 8, fact 1 [[0,-2,-2,1],[1,3,2,-1],[-2,-1,1,-1],[2,1,0,2]] [6,-3,-4,-5] => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]
# chain 8, fact 1 [[0,-2,-2,1],[1,3,2,-1],[-2,-1,1,-1],[-1,-2,-1,1]] [6,-3,-4,-5] => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]
#--
# chain 8, fact 1 [[0,-2,-2,1],[-2,0,1,-2],[1,2,2,0],[2,1,0,2]] [6,-3,-4,-5] => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]
# chain 8, fact 1 [[0,-2,-2,1],[-2,0,1,-2],[1,2,2,0],[-1,-2,-1,1]] [6,-3,-4,-5] => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]
# chain 8, fact 1 [[0,-2,-2,1],[-2,0,1,-2],[-2,-1,1,-1],[2,1,0,2]] [6,-3,-4,-5] => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]
# chain 8, fact 1 [[0,-2,-2,1],[-2,0,1,-2],[-2,-1,1,-1],[-1,-2,-1,1]] [6,-3,-4,-5] => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]
#------------
# [[0,-2,-3,-2],[0,1,2,2],[-1,1,1,1],[0,2,2,1]],det=1 [6,-3,-4,-5], chain 8 => [28,-21,-18,-19] => [134,-95,-86,-97] => [642,-461,-412,-459] => [3076,-2203,-1974,-2205] => [14738,-10561,-9458,-10559] => [70614,-50595,-45316,-50597] => [338332,-242421,-217122,-242419] => [1621046,-1161503,-1040294,-1161505]
# [[0,-2,-3,-2],[0,2,2,1],[-1,1,1,1],[0,1,2,2]],det=-1 [6,-3,-4,-5], chain 8 => [28,-19,-18,-21] => [134,-95,-86,-97] => [642,-459,-412,-461] => [3076,-2203,-1974,-2205] => [14738,-10559,-9458,-10561] => [70614,-50595,-45316,-50597] => [338332,-242419,-217122,-242421] => [1621046,-1161503,-1040294,-1161505]

# [[0,-2,-2,1],[-2,0,1,-2],[-2,-1,1,-1],[-1,-2,-1,1]],det=-3 [6,-3,-4,-5], chain 8 => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]
# [[0,-2,-2,1],[-2,0,1,-2],[-2,-1,1,-1],[2,1,0,2]],det=-2 [6,-3,-4,-5], chain 8 => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]
# [[0,-2,-2,1],[-2,0,1,-2],[1,2,2,0],[-1,-2,-1,1]],det=-2 [6,-3,-4,-5], chain 8 => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]
# [[0,-2,-2,1],[-2,0,1,-2],[1,2,2,0],[2,1,0,2]],det=-1 [6,-3,-4,-5], chain 8 => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]
# [[0,-2,-2,1],[1,3,2,-1],[-2,-1,1,-1],[-1,-2,-1,1]],det=0 [6,-3,-4,-5], chain 8 => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]
# [[0,-2,-2,1],[1,3,2,-1],[-2,-1,1,-1],[2,1,0,2]],det=1 [6,-3,-4,-5], chain 8 => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]
# [[0,-2,-2,1],[1,3,2,-1],[1,2,2,0],[-1,-2,-1,1]],det=1 [6,-3,-4,-5], chain 8 => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]
# [[0,-2,-2,1],[1,3,2,-1],[1,2,2,0],[2,1,0,2]],det=2 [6,-3,-4,-5], chain 8 => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]

# [[0,-2,1,-2],[-2,0,-2,1],[-1,-2,1,-1],[-2,-1,-1,1]],det=-3 [6,-3,-4,-5], chain 8 => [12,-9,1,-10] => [39,-36,17,-26] => [141,-138,76,-85] => [522,-519,296,-305] => [1944,-1941,1117,-1126] => [7251,-7248,4181,-4190] => [27057,-27054,15616,-15625] => [100974,-100971,58292,-58301]
# [[0,-2,1,-2],[-2,0,-2,1],[-1,-2,1,-1],[1,2,0,2]],det=-2 [6,-3,-4,-5], chain 8 => [12,-9,1,-10] => [39,-36,17,-26] => [141,-138,76,-85] => [522,-519,296,-305] => [1944,-1941,1117,-1126] => [7251,-7248,4181,-4190] => [27057,-27054,15616,-15625] => [100974,-100971,58292,-58301]
# [[0,-2,1,-2],[-2,0,-2,1],[2,1,2,0],[-2,-1,-1,1]],det=-2 [6,-3,-4,-5], chain 8 => [12,-9,1,-10] => [39,-36,17,-26] => [141,-138,76,-85] => [522,-519,296,-305] => [1944,-1941,1117,-1126] => [7251,-7248,4181,-4190] => [27057,-27054,15616,-15625] => [100974,-100971,58292,-58301]
# [[0,-2,1,-2],[-2,0,-2,1],[2,1,2,0],[1,2,0,2]],det=-1 [6,-3,-4,-5], chain 8 => [12,-9,1,-10] => [39,-36,17,-26] => [141,-138,76,-85] => [522,-519,296,-305] => [1944,-1941,1117,-1126] => [7251,-7248,4181,-4190] => [27057,-27054,15616,-15625] => [100974,-100971,58292,-58301]
# [[0,-2,1,-2],[1,3,-1,2],[-1,-2,1,-1],[-2,-1,-1,1]],det=0 [6,-3,-4,-5], chain 8 => [12,-9,1,-10] => [39,-36,17,-26] => [141,-138,76,-85] => [522,-519,296,-305] => [1944,-1941,1117,-1126] => [7251,-7248,4181,-4190] => [27057,-27054,15616,-15625] => [100974,-100971,58292,-58301]
# [[0,-2,1,-2],[1,3,-1,2],[-1,-2,1,-1],[1,2,0,2]],det=1 [6,-3,-4,-5], chain 8 => [12,-9,1,-10] => [39,-36,17,-26] => [141,-138,76,-85] => [522,-519,296,-305] => [1944,-1941,1117,-1126] => [7251,-7248,4181,-4190] => [27057,-27054,15616,-15625] => [100974,-100971,58292,-58301]
# [[0,-2,1,-2],[1,3,-1,2],[2,1,2,0],[-2,-1,-1,1]],det=1 [6,-3,-4,-5], chain 8 => [12,-9,1,-10] => [39,-36,17,-26] => [141,-138,76,-85] => [522,-519,296,-305] => [1944,-1941,1117,-1126] => [7251,-7248,4181,-4190] => [27057,-27054,15616,-15625] => [100974,-100971,58292,-58301]
# [[0,-2,1,-2],[1,3,-1,2],[2,1,2,0],[1,2,0,2]],det=2 [6,-3,-4,-5], chain 8 => [12,-9,1,-10] => [39,-36,17,-26] => [141,-138,76,-85] => [522,-519,296,-305] => [1944,-1941,1117,-1126] => [7251,-7248,4181,-4190] => [27057,-27054,15616,-15625] => [100974,-100971,58292,-58301]

# [[3,1,-1,2],[-2,0,1,-2],[-2,-1,1,-1],[-1,-2,-1,1]],det=0 [6,-3,-4,-5], chain 8 => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]
# [[3,1,-1,2],[-2,0,1,-2],[-2,-1,1,-1],[2,1,0,2]],det=1 [6,-3,-4,-5], chain 8 => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]
# [[3,1,-1,2],[-2,0,1,-2],[1,2,2,0],[-1,-2,-1,1]],det=1 [6,-3,-4,-5], chain 8 => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]
# [[3,1,-1,2],[-2,0,1,-2],[1,2,2,0],[2,1,0,2]],det=2 [6,-3,-4,-5], chain 8 => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]
# [[3,1,-1,2],[1,3,2,-1],[-2,-1,1,-1],[-1,-2,-1,1]],det=3 [6,-3,-4,-5], chain 8 => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]
# [[3,1,-1,2],[1,3,2,-1],[-2,-1,1,-1],[2,1,0,2]],det=4 [6,-3,-4,-5], chain 8 => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]
# [[3,1,-1,2],[1,3,2,-1],[1,2,2,0],[-1,-2,-1,1]],det=4 [6,-3,-4,-5], chain 8 => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]
# [[3,1,-1,2],[1,3,2,-1],[1,2,2,0],[2,1,0,2]],det=5 [6,-3,-4,-5], chain 8 => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]

# [[3,1,2,-1],[-2,0,-2,1],[-1,-2,1,-1],[-2,-1,-1,1]],det=0 [6,-3,-4,-5], chain 8 => [12,-9,1,-10] => [39,-36,17,-26] => [141,-138,76,-85] => [522,-519,296,-305] => [1944,-1941,1117,-1126] => [7251,-7248,4181,-4190] => [27057,-27054,15616,-15625] => [100974,-100971,58292,-58301]
# [[3,1,2,-1],[-2,0,-2,1],[-1,-2,1,-1],[1,2,0,2]],det=1 [6,-3,-4,-5], chain 8 => [12,-9,1,-10] => [39,-36,17,-26] => [141,-138,76,-85] => [522,-519,296,-305] => [1944,-1941,1117,-1126] => [7251,-7248,4181,-4190] => [27057,-27054,15616,-15625] => [100974,-100971,58292,-58301]
# [[3,1,2,-1],[-2,0,-2,1],[2,1,2,0],[-2,-1,-1,1]],det=1 [6,-3,-4,-5], chain 8 => [12,-9,1,-10] => [39,-36,17,-26] => [141,-138,76,-85] => [522,-519,296,-305] => [1944,-1941,1117,-1126] => [7251,-7248,4181,-4190] => [27057,-27054,15616,-15625] => [100974,-100971,58292,-58301]
# [[3,1,2,-1],[-2,0,-2,1],[2,1,2,0],[1,2,0,2]],det=2 [6,-3,-4,-5], chain 8 => [12,-9,1,-10] => [39,-36,17,-26] => [141,-138,76,-85] => [522,-519,296,-305] => [1944,-1941,1117,-1126] => [7251,-7248,4181,-4190] => [27057,-27054,15616,-15625] => [100974,-100971,58292,-58301]
# [[3,1,2,-1],[1,3,-1,2],[-1,-2,1,-1],[-2,-1,-1,1]],det=3 [6,-3,-4,-5], chain 8 => [12,-9,1,-10] => [39,-36,17,-26] => [141,-138,76,-85] => [522,-519,296,-305] => [1944,-1941,1117,-1126] => [7251,-7248,4181,-4190] => [27057,-27054,15616,-15625] => [100974,-100971,58292,-58301]
# [[3,1,2,-1],[1,3,-1,2],[-1,-2,1,-1],[1,2,0,2]],det=4 [6,-3,-4,-5], chain 8 => [12,-9,1,-10] => [39,-36,17,-26] => [141,-138,76,-85] => [522,-519,296,-305] => [1944,-1941,1117,-1126] => [7251,-7248,4181,-4190] => [27057,-27054,15616,-15625] => [100974,-100971,58292,-58301]
# [[3,1,2,-1],[1,3,-1,2],[2,1,2,0],[-2,-1,-1,1]],det=4 [6,-3,-4,-5], chain 8 => [12,-9,1,-10] => [39,-36,17,-26] => [141,-138,76,-85] => [522,-519,296,-305] => [1944,-1941,1117,-1126] => [7251,-7248,4181,-4190] => [27057,-27054,15616,-15625] => [100974,-100971,58292,-58301]
# [[3,1,2,-1],[1,3,-1,2],[2,1,2,0],[1,2,0,2]],det=5 [6,-3,-4,-5], chain 8 => [12,-9,1,-10] => [39,-36,17,-26] => [141,-138,76,-85] => [522,-519,296,-305] => [1944,-1941,1117,-1126] => [7251,-7248,4181,-4190] => [27057,-27054,15616,-15625] => [100974,-100971,58292,-58301]
# elapsed time: 73 s
# 
TEST EC34S symmetrical
DATA
[[3,1,-1,2],[-2,0,1,-2],[-2,-1,1,-1],[2,1,0,2]],det=1 [6,-3,-4,-5], chain 8 => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]
[[3,1,-1,2],[-2,0,1,-2],[1,2,2,0],[-1,-2,-1,1]],det=1 [6,-3,-4,-5], chain 8 => [9,-6,-8,-1] => [27,-24,-19,10] => [96,-93,-59,50] => [354,-351,-208,199] => [1317,-1314,-764,755] => [4911,-4908,-2839,2830] => [18324,-18321,-10583,10574] => [68382,-68379,-39484,39475]
CALL linear.MatrixTester -perms $(DATA)
#--------
TEST FL01 -follow
CALL linear.MatrixTester -follow -mf find_seq.man -vf data/prewrob3.sub

TEST FL02 -follow inverse matrix
CALL linear.MatrixTester -follow -mf data/inverse.man -vf data/prewrob3.sub

TEST FL03 prepare determinants +/-1 and their inverses
CALL linear.MatrixTester -inv -mf data/det1.grep

TEST FL04 -follow with determinants +/-1 
CALL linear.MatrixTester -follow -mf test/FL03.this.tst -vf data/prewrob3.sub

TEST FL05 -follow =FL01+FL04
CALL linear.MatrixTester -follow -mf find_seq.man -mf test/FL03.this.tst -vf data/prewrob3.sub
#--------
TEST FS01 generate find_seq.man
CALL linear.MatrixTester -gen -mf find_seq.man [6,-3,-4,-5] 
# many

TEST FS02 generate find_seq.man
CALL linear.MatrixTester -gen -mf find_seq.man [16,2,-9,-15] 
# few

TEST FS03 generate find_seq.man
CALL linear.MatrixTester -gen -mf find_seq.man [19,-3,-10,-18] 
# none

TEST FS04 generate find_seq.man
CALL linear.MatrixTester -gen -mf find_seq.man [34,2,-15,-33] 
# none
#--------

PACKAGE=org.teherba.ramath.symbolic
TEST EC34D det=0
CALL PolyMatrix -abst [[0,-2,-2,1],[1,3,2,-1],[-2,-1,1,-1],[-1,-2,-1,1]]
TEST EC34E det=1
CALL PolyMatrix -abst [[3,1,-1,2],[-2,0,1,-2],[-2,-1,1,-1],[2,1,0,2]]

PACKAGE=org.teherba.ramath

TEST EC35            ec340 -l 4
CALL MatrixExhauster ec340 -l 4 -v [6,-3,-4,-5]

TEST EC36            ec340 -l 5
CALL MatrixExhauster ec340 -l 5 -v [29,-11,-15,-27]

TEST EC37            ec340 -l 6
CALL MatrixExhauster ec340 -l 6 -v [89,-17,-40,-86]

TEST EC38            ec340 -l 7
CALL MatrixExhauster ec340 -l 7 -v [137,-44,-73,-128]
# [216,50,-167,-177] -> nothing (819 s)

TEST EC39            ec340 
CALL MatrixExhauster ec340 -l 5 -v [19,-3,-18,-10]

TEST EC40            ec340 
CALL MatrixExhauster ec340 -l 5 -v [34,9,-33,-16]
# no chain 8, no det=+/-1

TEST EC41            ec340 -l 5
CALL MatrixExhauster ec340 -l 5 -v [34,2,-15,-33]

TEST EC42            ec340 -l 5
CALL MatrixExhauster ec340 -l 5 -v [16,2,-15,-9]

TEST EC43            ec340 
CALL MatrixExhauster ec340 -l 7 -v [67,30,-51,-58]
# chain 2 only in 59654 s

TEST EC45
CALL linear.MatrixTester -inv [[1,1,0,-2],[-1,-1,-1,2],[-2,-1,-2,0],[-1,0,2,-1]]

TEST EC46
CALL linear.MatrixTester -chain [[-5,-6,1,-2],[12,14,-3,4],[-1,-1,0,0],[3,4,-1,1]] [19,-10,-3,-18] 4 0
#-----------
# EC(3)

TEST MX10            pEC322 
CALL MatrixExhauster pEC322 -l 4

TEST MX11            pEC322 
CALL MatrixExhauster pEC322 -l 5
# found chain 8, fact 27 [[5,5,0,-3],[3,0,5,5],[0,-3,5,5],[5,5,3,0]] [9,10,1,12] => [59,92,35,98] => [461,842,389,860] => [3935,7628,3719,7682] => [34769,68810,34121,68972] => [310979,619772,309035,620258] => [2792981,5579402,2787149,5580860] => [25119335,50218988,25101839,50223362] => [226021529,451984010,225969041,451997132]
# in 68 s
TEST MX12            pEC331 
CALL MatrixExhauster pEC331 -l 4

TEST MX13            pEC331 
CALL MatrixExhauster pEC331 -l 5

TEST MX14            pEC331 
CALL MatrixExhauster pEC331 -l 6
# found chain 8, fact 27 [[5,5,0,-3],[3,0,-5,5],[0,3,5,-5],[5,5,-3,0]] [3,4,5,6] => [17,14,7,20] => [95,116,-23,134] => [653,1070,-437,1124] => [5243,9764,-4595,9926] => [45257,88334,-43313,88820] => [401495,796436,-395663,797894] => [3595973,7172270,-3578477,7176644] => [32311283,64563524,-32258795,64576646]
#    3*a^3   + 3*b^3    + 3*c^3    - 3*d^3
# + 10*a^2*c + 10*a*c^2 + 10*b*c^2 - 10*a^2*d 
# + 40*a*d^2 + 40*b^2*c - 40*b^2*d + 40*b*d^2
# + 50*a*b*c - 50*a*c*d - 50*b*c*d - 50*a*b*d
 
TEST MX15            pEC322 
CALL MatrixExhauster pEC322 -l 6 -v [16,2,15,9]
# loops

TEST MX16            pEC322 
CALL MatrixExhauster pEC322 -l 6 -v [15,9,16,2]
# loops   

TEST MX17            pEC331 
CALL MatrixExhauster pEC331 -l 6 -v [18,21,19,28]
# chain 8, fact 27 [[0,-5,3,5],[3,5,0,-5],[5,0,5,-3],[5,-3,5,0]] [18,21,19,28] => [92,19,101,122] => [818,-239,599,908] => [7532,-3281,4361,7802]

TEST MX18            pEC331 
CALL MatrixExhauster pEC331 -l 6 -v [11,27,15,29]

TEST MX19            pEC322 
CALL MatrixExhauster pEC322 -l 6 -v [34,2,33,15]
                
TEST MX21
CALL MatrixExhauster pEC331 -l 3 -v [1,0,0,1]
# TEST MX22
# CALL MatrixExhauster pEC340 -l 3 -v [1,0,0,-1]
TEST MX23
CALL MatrixExhauster pEC322 -l 3 -v [1,0,0,1]
TEST MX24
CALL MatrixExhauster pEC322 -l 3 -v [1,1,1,1]

TEST MX25            pEC331 
CALL MatrixExhauster pEC331 -l 10 -v [18,21,19,28]
# chain 8, fact 27 [[0,-5,3,5],[3,5,0,-5],[5,0,5,-3],[5,-3,5,0]] [18,21,19,28] => [92,19,101,122] => [818,-239,599,908] => [7532,-3281,4361,7802]

#--------
# initial 10 Vectors from data/prewrob3.dat
# 6,-3,-5,-4
# 9,-1,-8,-6
# 12,1,-10,-9
# 16,2,-15,-9
# 19,-3,-18,-10
# 20,-7,-17,-14
# 25,-4,-22,-17
# 27,10,-24,-19
# 28,-18,-21,-19
# 29,-11,-27,-15

LIMIT=5
TEST MX30            pEC340
CALL MatrixExhauster pEC340 -l $(LIMIT) -v [6,-3,-5,-4]
# chain 8, fact 1 [[0,-2,-2,1],[-2,0,1,-2],[1,2,2,0],[2,1,0,2]] [6,-3,-5,-4] => [12,-9,-10,1] => [39,-36,-26,17] => [141,-138,-85,76] => [522,-519,-305,296] => [1944,-1941,-1126,1117] => [7251,-7248,-4190,4181] => [27057,-27054,-15625,15616] => [100974,-100971,-58301,58292]
# chain 8, fact 1 [[0,-2,1,-2],[-2,0,-2,1],[2,1,2,0],[1,2,0,2]] [6,-3,-5,-4] => [9,-6,-1,-8] => [27,-24,10,-19] => [96,-93,50,-59] => [354,-351,199,-208] => [1317,-1314,755,-764] => [4911,-4908,2830,-2839] => [18324,-18321,10574,-10583] => [68382,-68379,39475,-39484]

TEST MX31            pEC340 
CALL MatrixExhauster pEC340 -l $(LIMIT) -v [9,-1,-8,-6]
TEST MX32            pEC340
CALL MatrixExhauster pEC340 -l $(LIMIT) -v [12,1,-10,-9]
TEST MX33            pEC340
CALL MatrixExhauster pEC340 -l $(LIMIT) -v [16,2,-15,-9]
TEST MX34            pEC340 
CALL MatrixExhauster pEC340 -l $(LIMIT) -v [19,-3,-18,-10]
TEST MX35            pEC340
CALL MatrixExhauster pEC340 -l $(LIMIT) -v [20,-7,-17,-14]
TEST MX36            pEC340
CALL MatrixExhauster pEC340 -l $(LIMIT) -v [25,-4,-22,-17]
TEST MX37            pEC340 
CALL MatrixExhauster pEC340 -l $(LIMIT) -v [27,10,-24,-19]
TEST MX38            pEC340
CALL MatrixExhauster pEC340 -l $(LIMIT) -v [28,-18,-21,-19]
TEST MX39            pEC340
CALL MatrixExhauster pEC340 -l $(LIMIT) -v [29,-11,-27,-15]

# C:\Users\gfis\work\gits\ramath>grep "chain 8" test/MX3*.this.tst | cut -b 20-150 | sort
# chain 8, fact 1 [[-2,0,-2,1],[0,-2,1,-2],[1,2,0,2],[2,1,2,0]] [6,-3,-5,-4] => [-6,9,-8,-1] => [27,-24,10,-19] => [-93,96,-59,50] => [354,-351,199,-208] => [-1314,1317,-764,755] => [4911,-4908,2830,-2839] => [-18321,18324,-10583,10574] => [68382,-68379,39475,-39484]
# chain 8, fact 1 [[-2,0,1,-2],[0,-2,-2,1],[2,1,0,2],[1,2,2,0]] [6,-3,-5,-4] => [-9,12,1,-10] => [39,-36,-26,17] => [-138,141,76,-85] => [522,-519,-305,296] => [-1941,1944,1117,-1126] => [7251,-7248,-4190,4181] => [-27054,27057,15616,-15625] => [100974,-100971,-58301,58292]
# chain 8, fact 1 [[0,-2,-2,1],[-2,0,1,-2],[1,2,2,0],[2,1,0,2]] [6,-3,-5,-4] => [12,-9,-10,1] => [39,-36,-26,17] => [141,-138,-85,76] => [522,-519,-305,296] => [1944,-1941,-1126,1117] => [7251,-7248,-4190,4181] => [27057,-27054,-15625,15616] => [100974,-100971,-58301,58292]
# chain 8, fact 1 [[0,-2,1,-2],[-2,0,-2,1],[2,1,2,0],[1,2,0,2]] [6,-3,-5,-4] => [9,-6,-1,-8] => [27,-24,10,-19] => [96,-93,50,-59] => [354,-351,199,-208] => [1317,-1314,755,-764] => [4911,-4908,2830,-2839] => [18324,-18321,10574,-10583] => [68382,-68379,39475,-39484]
# chain 8, fact 1 [[-2,-2,1,0],[1,0,2,2],[2,2,0,1],[0,1,-2,-2]] [9,-1,-8,-6] => [-24,-19,10,27] => [96,50,-59,-93] => [-351,-208,199,354] => [1317,755,-764,-1314] => [-4908,-2839,2830,4911] => [18324,10574,-10583,-18321] => [-68379,-39484,39475,68382] => [255201,147335,-147344,-255198]
# chain 8, fact 1 [[-2,1,-2,0],[2,0,2,1],[1,2,0,2],[0,-2,1,-2]] [9,-1,-8,-6] => [-3,-4,-5,6] => [12,-10,1,-9] => [-36,17,-26,39] => [141,-85,76,-138] => [-519,296,-305,522] => [1944,-1126,1117,-1941] => [-7248,4181,-4190,7251] => [27057,-15625,15616,-27054]
# chain 8, fact 1 [[0,-2,1,-2],[1,2,0,2],[2,0,2,1],[-2,1,-2,0]] [9,-1,-8,-6] => [6,-5,-4,-3] => [12,-10,1,-9] => [39,-26,17,-36] => [141,-85,76,-138] => [522,-305,296,-519] => [1944,-1126,1117,-1941] => [7251,-4190,4181,-7248] => [27057,-15625,15616,-27054]
# chain 8, fact 1 [[0,1,-2,-2],[2,2,0,1],[1,0,2,2],[-2,-2,1,0]] [9,-1,-8,-6] => [27,10,-19,-24] => [96,50,-59,-93] => [354,199,-208,-351] => [1317,755,-764,-1314] => [4911,2830,-2839,-4908] => [18324,10574,-10583,-18321] => [68382,39475,-39484,-68379] => [255201,147335,-147344,-255198]
# chain 8, fact 1 [[-2,1,-2,0],[2,0,2,1],[1,2,0,2],[0,-2,1,-2]] [12,1,-10,-9] => [-3,-5,-4,6] => [9,-8,-1,-6] => [-24,10,-19,27] => [96,-59,50,-93] => [-351,199,-208,354] => [1317,-764,755,-1314] => [-4908,2830,-2839,4911] => [18324,-10583,10574,-18321]
# chain 8, fact 1 [[0,1,-2,-2],[2,2,0,1],[1,0,2,2],[-2,-2,1,0]] [12,1,-10,-9] => [39,17,-26,-36] => [141,76,-85,-138] => [522,296,-305,-519] => [1944,1117,-1126,-1941] => [7251,4181,-4190,-7248] => [27057,15616,-15625,-27054] => [100974,58292,-58301,-100971] => [376836,217561,-217570,-376833]
# chain 8, fact 1 [[0,-2,-2,1],[1,2,2,0],[-2,1,0,-2],[2,0,1,2]] [27,10,-24,-19] => [9,-1,-6,-8] => [6,-5,-3,-4] => [12,-10,-9,1] => [39,-26,-36,17] => [141,-85,-138,76] => [522,-305,-519,296] => [1944,-1126,-1941,1117] => [7251,-4190,-7248,4181]
# chain 8, fact 1 [[0,1,-2,-2],[2,2,1,0],[-2,-2,0,1],[1,0,2,2]] [27,10,-24,-19] => [96,50,-93,-59] => [354,199,-351,-208] => [1317,755,-1314,-764] => [4911,2830,-4908,-2839] => [18324,10574,-18321,-10583] => [68382,39475,-68379,-39484] => [255201,147335,-255198,-147344] => [952419,549874,-952416,-549883]

TEST MX3A            pEC340
CALL MatrixExhauster pEC340 -l $(LIMIT) -v [34,2,-33,-15]
TEST MX3B            pEC340
CALL MatrixExhauster pEC340 -l $(LIMIT) -v [34,9,-33,-16]
TEST MX3C            pEC340
CALL MatrixExhauster pEC340 -l $(LIMIT) -v [39,17,-36,-26]
TEST MX3D            pEC340
CALL MatrixExhauster pEC340 -l $(LIMIT) -v [40,12,-33,-31]
TEST MX3E            pEC340
CALL MatrixExhauster pEC340 -l $(LIMIT) -v [41,-2,-40,-17]
TEST MX3F            pEC340
CALL MatrixExhauster pEC340 -l $(LIMIT) -v [41,-6,-33,-32]
TEST MX3G            pEC340
CALL MatrixExhauster pEC340 -l $(LIMIT) -v [44,-16,-41,-23]
TEST MX3H            pEC340
CALL MatrixExhauster pEC340 -l $(LIMIT) -v [46,-27,-37,-30]
#--------------------------
TEST MX40            pEC340
CALL MatrixExhauster pEC340 -l 3 -v [3,4,5,-6]
# found chain 6, fact 1 [[-2,-2,1,0],[1,0,2,2],[2,2,0,1],[0,1,-2,-2]] [3,4,5,-6] => [-9,1,8,6] => [24,19,-10,-27] => [-96,-50,59,93]

TEST MX41            pEC340 
CALL MatrixExhauster pEC340 -l 3 -v [9,10,-1,-12]
# found chain 2, fact 1 [[-2,-2,1,0],[1,0,2,2],[2,2,0,1],[0,1,-2,-2]] [9,10,-1,-12] => [-39,-17,26,36] => [138,85,-76,-141] ?? [-522,-296,305,519]

TEST MX42            pEC340
CALL MatrixExhauster pEC340 -l 3 -v [1,6,8,-9]
# found chain 8, fact 1 [[0,2,2,1],[1,-2,-2,0],[2,1,0,2],[-2,0,1,-2]] [1,6,8,-9] => [19,-27,-10,24] => [-50,93,59,-96] => [208,-354,-199,351]

TEST MX43            pEC340
CALL MatrixExhauster pEC340 -l 5 -v [1,6,8,-9]

TEST MX44            pEC340
CALL MatrixExhauster pEC340 -l 7 -v [3,4,5,-6]

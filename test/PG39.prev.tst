/*  Generated at yyyy-mm-dd hh:mm by
    java -cp dist/ramath.jar org.teherba.ramath.ProgramGenerator  -l 3 -f test/PG39.data.tmp pident
    Do   N O T   edit this file, but ProgramGenerator.java instead!
*/
#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[]) {
int reslines = 0;
printf("#---> start of results ----\n");
/* simplified and grouped: 
    [0]  + m^12	( - A11*A11*A11 - A21*A21*A21 - A31*A31*A31 + A41*A41*A41)	4{A11,A21,A31,A41}
    [1]  + 3*m^11*n	( - A11*A11*A12 - A21*A21*A22 - A31*A31*A32 + A41*A41*A42)	8{A11,A12,A21,A22,A31,A32,A41,A42}
    [2]  + 3*m^10*n^2	( - A11*A12*A12 - A11*A11*A13 - A21*A22*A22 - A21*A21*A23 - A31*A32*A32 - A31*A31*A33 + A41*A42*A42 + A41*A41*A43)	12{A11,A12,A13,A21,A22,A23,A31,A32,A33,A41,A42,A43}
    [3]  + m^9*n^3	( - A12*A12*A12 - 6*A11*A12*A13 - 3*A11*A11*A14 - A22*A22*A22 - 6*A21*A22*A23 - 3*A21*A21*A24 - A32*A32*A32 - 6*A31*A32*A33 - 3*A31*A31*A34 + A42*A42*A42 + 6*A41*A42*A43 + 3*A41*A41*A44)	16{A11,A12,A13,A14,A21,A22,A23,A24,A31,A32,A33,A34,A41,A42,A43,A44}
    [4]  + 3*m^8*n^4	( - A12*A12*A13 - A11*A13*A13 - 2*A11*A12*A14 - A22*A22*A23 - A21*A23*A23 - 2*A21*A22*A24 - A32*A32*A33 - A31*A33*A33 - 2*A31*A32*A34 + A42*A42*A43 + A41*A43*A43 + 2*A41*A42*A44)	16{A11,A12,A13,A14,A21,A22,A23,A24,A31,A32,A33,A34,A41,A42,A43,A44}
    [5]  + 3*m^7*n^5	( - A12*A13*A13 - A12*A12*A14 - 2*A11*A13*A14 - A22*A23*A23 - A22*A22*A24 - 2*A21*A23*A24 - A32*A33*A33 - A32*A32*A34 - 2*A31*A33*A34 + A42*A43*A43 + A42*A42*A44 + 2*A41*A43*A44)	16{A11,A12,A13,A14,A21,A22,A23,A24,A31,A32,A33,A34,A41,A42,A43,A44}
    [6]  + m^6*n^6	( - A13*A13*A13 - 6*A12*A13*A14 - 3*A11*A14*A14 - A23*A23*A23 - 6*A22*A23*A24 - 3*A21*A24*A24 - A33*A33*A33 - 6*A32*A33*A34 - 3*A31*A34*A34 + A43*A43*A43 + 6*A42*A43*A44 + 3*A41*A44*A44)	16{A11,A12,A13,A14,A21,A22,A23,A24,A31,A32,A33,A34,A41,A42,A43,A44}
    [7]  + 3*m^5*n^7	( - A13*A13*A14 - A12*A14*A14 - A23*A23*A24 - A22*A24*A24 - A33*A33*A34 - A32*A34*A34 + A43*A43*A44 + A42*A44*A44)	12{A12,A13,A14,A22,A23,A24,A32,A33,A34,A42,A43,A44}
    [8]  + 3*m^4*n^8	( - A13*A14*A14 - A23*A24*A24 - A33*A34*A34 + A43*A44*A44)	8{A13,A14,A23,A24,A33,A34,A43,A44}
    [9]  + m^3*n^9	( - A14*A14*A14 - A24*A24*A24 - A34*A34*A34 + A44*A44*A44)	4{A14,A24,A34,A44}
    minSize=4, maxSize=16
#---> nrows=4
#---> ncols=4
#---> isolated=a,b,c,d
#---> parameter=m,n
#---> rset0=a - A11*m^4 - A12*m^3*n - A13*m^2*n^2 - A14*m*n^3; b - A21*m^4 - A22*m^3*n - A23*m^2*n^2 - A24*m*n^3; c - A31*m^4 - A32*m^3*n - A33*m^2*n^2 - A34*m*n^3; d - A41*m^4 - A42*m^3*n - A43*m^2*n^2 - A44*m*n^3; a^3 + b^3 + c^3 - d^3
#---> poly1= - A11^3*m^12 - A21^3*m^12 - A31^3*m^12 + A41^3*m^12 - 3*A11^2*A12*m^11*n - 3*A21^2*A22*m^11*n - 3*A31^2*A32*m^11*n + 3*A41^2*A42*m^11*n - 3*A11*A12^2*m^10*n^2 - 3*A11^2*A13*m^10*n^2 - 3*A21*A22^2*m^10*n^2 - 3*A21^2*A23*m^10*n^2 - 3*A31*A32^2*m^10*n^2 - 3*A31^2*A33*m^10*n^2 + 3*A41*A42^2*m^10*n^2 + 3*A41^2*A43*m^10*n^2 - A12^3*m^9*n^3 - 6*A11*A12*A13*m^9*n^3 - 3*A11^2*A14*m^9*n^3 - A22^3*m^9*n^3 - 6*A21*A22*A23*m^9*n^3 - 3*A21^2*A24*m^9*n^3 - A32^3*m^9*n^3 - 6*A31*A32*A33*m^9*n^3 - 3*A31^2*A34*m^9*n^3 + A42^3*m^9*n^3 + 6*A41*A42*A43*m^9*n^3 + 3*A41^2*A44*m^9*n^3 - 3*A12^2*A13*m^8*n^4 - 3*A11*A13^2*m^8*n^4 - 6*A11*A12*A14*m^8*n^4 - 3*A22^2*A23*m^8*n^4 - 3*A21*A23^2*m^8*n^4 - 6*A21*A22*A24*m^8*n^4 - 3*A32^2*A33*m^8*n^4 - 3*A31*A33^2*m^8*n^4 - 6*A31*A32*A34*m^8*n^4 + 3*A42^2*A43*m^8*n^4 + 3*A41*A43^2*m^8*n^4 + 6*A41*A42*A44*m^8*n^4 - 3*A12*A13^2*m^7*n^5 - 3*A12^2*A14*m^7*n^5 - 6*A11*A13*A14*m^7*n^5 - 3*A22*A23^2*m^7*n^5 - 3*A22^2*A24*m^7*n^5 - 6*A21*A23*A24*m^7*n^5 - 3*A32*A33^2*m^7*n^5 - 3*A32^2*A34*m^7*n^5 - 6*A31*A33*A34*m^7*n^5 + 3*A42*A43^2*m^7*n^5 + 3*A42^2*A44*m^7*n^5 + 6*A41*A43*A44*m^7*n^5 - A13^3*m^6*n^6 - 6*A12*A13*A14*m^6*n^6 - 3*A11*A14^2*m^6*n^6 - A23^3*m^6*n^6 - 6*A22*A23*A24*m^6*n^6 - 3*A21*A24^2*m^6*n^6 - A33^3*m^6*n^6 - 6*A32*A33*A34*m^6*n^6 - 3*A31*A34^2*m^6*n^6 + A43^3*m^6*n^6 + 6*A42*A43*A44*m^6*n^6 + 3*A41*A44^2*m^6*n^6 - 3*A13^2*A14*m^5*n^7 - 3*A12*A14^2*m^5*n^7 - 3*A23^2*A24*m^5*n^7 - 3*A22*A24^2*m^5*n^7 - 3*A33^2*A34*m^5*n^7 - 3*A32*A34^2*m^5*n^7 + 3*A43^2*A44*m^5*n^7 + 3*A42*A44^2*m^5*n^7 - 3*A13*A14^2*m^4*n^8 - 3*A23*A24^2*m^4*n^8 - 3*A33*A34^2*m^4*n^8 + 3*A43*A44^2*m^4*n^8 - A14^3*m^3*n^9 - A24^3*m^3*n^9 - A34^3*m^3*n^9 + A44^3*m^3*n^9
#---> powerSum=a^3 + b^3 + c^3 - d^3
#---> exponent=3
#---> pmat=[[A11,A12,A13,A14],[A21,A22,A23,A24],[A31,A32,A33,A34],[A41,A42,A43,A44]]
*/
int A11,A12,A13,A14,A21,A22,A23,A24,A31,A32,A33,A34,A41,A42,A43,A44;
int sum0 = 0;
for (A11 = -3; A11 < 4; A11++)  {
for (A21 = -3; A21 < 4; A21++)  {
for (A31 = -3; A31 < 4; A31++)  {
for (A41 = -3; A41 < 4; A41++)  {
if ( - A11*A11*A11 - A21*A21*A21 - A31*A31*A31 + A41*A41*A41 == 0) /* [0], minSize = 4 */  {
for (A14 = -3; A14 < 4; A14++)  {
for (A24 = -3; A24 < 4; A24++)  {
for (A34 = -3; A34 < 4; A34++)  {
for (A44 = -3; A44 < 4; A44++)  {
if ( - A14*A14*A14 - A24*A24*A24 - A34*A34*A34 + A44*A44*A44 == 0) /* [9], minSize = 4 */  {
for (A12 = -3; A12 < 4; A12++)  {
for (A22 = -3; A22 < 4; A22++)  {
for (A32 = -3; A32 < 4; A32++)  {
for (A42 = -3; A42 < 4; A42++)  {
if ( - A11*A11*A12 - A21*A21*A22 - A31*A31*A32 + A41*A41*A42 == 0) /* [1], minSize = 8 */  {
for (A13 = -3; A13 < 4; A13++)  {
/* check 1 */ int sum1 = ((((A11)*8+A12)*8+A13)*8+A14); 
for (A23 = -3; A23 < 4; A23++)  {
/* check 2 */ int sum2 = ((((A21)*8+A22)*8+A23)*8+A24); if (sum1 < sum2) {
for (A33 = -3; A33 < 4; A33++)  {
/* check 3 */ int sum3 = ((((A31)*8+A32)*8+A33)*8+A34); if (sum2 < sum3) {
for (A43 = -3; A43 < 4; A43++)  {
/* check 4 */ int sum4 = ((((A41)*8+A42)*8+A43)*8+A44); if (sum3 < sum4) {
if ( - A13*A14*A14 - A23*A24*A24 - A33*A34*A34 + A43*A44*A44 == 0) /* [8], minSize = 8 */  {
if ( - A11*A12*A12 - A11*A11*A13 - A21*A22*A22 - A21*A21*A23 - A31*A32*A32 - A31*A31*A33 + A41*A42*A42 + A41*A41*A43 == 0) /* [2], minSize = 12 */  {
if ( - A13*A13*A14 - A12*A14*A14 - A23*A23*A24 - A22*A24*A24 - A33*A33*A34 - A32*A34*A34 + A43*A43*A44 + A42*A44*A44 == 0) /* [7], minSize = 12 */  {
if ( - A12*A12*A12 - 6*A11*A12*A13 - 3*A11*A11*A14 - A22*A22*A22 - 6*A21*A22*A23 - 3*A21*A21*A24 - A32*A32*A32 - 6*A31*A32*A33 - 3*A31*A31*A34 + A42*A42*A42 + 6*A41*A42*A43 + 3*A41*A41*A44 == 0) /* [3], minSize = 16 */  {
if ( - A12*A12*A13 - A11*A13*A13 - 2*A11*A12*A14 - A22*A22*A23 - A21*A23*A23 - 2*A21*A22*A24 - A32*A32*A33 - A31*A33*A33 - 2*A31*A32*A34 + A42*A42*A43 + A41*A43*A43 + 2*A41*A42*A44 == 0) /* [4], minSize = 16 */  {
if ( - A12*A13*A13 - A12*A12*A14 - 2*A11*A13*A14 - A22*A23*A23 - A22*A22*A24 - 2*A21*A23*A24 - A32*A33*A33 - A32*A32*A34 - 2*A31*A33*A34 + A42*A43*A43 + A42*A42*A44 + 2*A41*A43*A44 == 0) /* [5], minSize = 16 */  {
if ( - A13*A13*A13 - 6*A12*A13*A14 - 3*A11*A14*A14 - A23*A23*A23 - 6*A22*A23*A24 - 3*A21*A24*A24 - A33*A33*A33 - 6*A32*A33*A34 - 3*A31*A34*A34 + A43*A43*A43 + 6*A42*A43*A44 + 3*A41*A44*A44 == 0) /* [6], minSize = 16 */  {
if (A11 != 0 || A12 != 0 || A13 != 0 || A14 != 0) /* row 1 != 0 */  {
if (A21 != 0 || A22 != 0 || A23 != 0 || A24 != 0) /* row 2 != 0 */  {
if (A31 != 0 || A32 != 0 || A33 != 0 || A34 != 0) /* row 3 != 0 */  {
if (A41 != 0 || A42 != 0 || A43 != 0 || A44 != 0) /* row 4 != 0 */  {
printf("[");
printf("[%d,%d,%d,%d]",A11,A12,A13,A14);
printf(",");
printf("[%d,%d,%d,%d]",A21,A22,A23,A24);
printf(",");
printf("[%d,%d,%d,%d]",A31,A32,A33,A34);
printf(",");
printf("[%d,%d,%d,%d]",A41,A42,A43,A44);
printf("]");
reslines ++;
printf("\n");
}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
printf("#---> reslines=%d\n", reslines);
} /* main */
#---> start of results ----
[[-1,2,0,3],[1,-1,3,0],[1,1,3,0],[1,2,0,3]]
[[-1,2,-1,0],[1,2,-1,1],[2,-2,1,-1],[2,-1,2,0]]
[[-1,2,1,1],[1,2,1,0],[2,1,2,0],[2,2,1,1]]
[[0,1,0,0],[0,2,-3,3],[1,-2,3,-3],[1,-2,3,0]]
[[0,1,0,0],[0,2,3,3],[1,2,3,0],[1,2,3,3]]
[[0,1,-2,1],[0,2,-1,2],[1,-1,2,-2],[1,-1,2,1]]
[[0,1,2,1],[0,2,1,2],[1,1,2,-1],[1,1,2,2]]
[[0,0,-1,0],[0,3,-2,1],[3,-3,2,-1],[3,-3,2,0]]
[[0,0,1,0],[0,3,2,1],[3,3,2,0],[3,3,2,1]]
[[0,3,-1,1],[0,3,1,1],[3,0,2,-1],[3,0,2,1]]
#---> reslines=10

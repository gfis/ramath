/*  Generated at yyyy-mm-dd hh:mm by
    java -cp dist/ramath.jar org.teherba.ramath.ProgramGenerator  -l 2 -f test/PG22.data.tmp pident
    Do   N O T   edit this file, but ProgramGenerator.java instead!
*/
#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[]) {
int reslines = 0;
printf("#---> start of results ----\n");
/* simplified and grouped: 
    [0]  + m^2	(A14*A14 + A24*A24 - A34*A34)	3{A14,A24,A34}
    [1]  + 2*m^3	(A11*A14 + A21*A24 - A31*A34)	6{A11,A14,A21,A24,A31,A34}
    [2]  + m^4	(A11*A11 + A21*A21 - A31*A31)	3{A11,A21,A31}
    [3]  + 2*m*n	(A14*A15 + A24*A25 - A34*A35)	6{A14,A15,A24,A25,A34,A35}
    [4]  + 2*m^2*n	(A12*A14 + A11*A15 + A22*A24 + A21*A25 - A32*A34 - A31*A35)	12{A11,A12,A14,A15,A21,A22,A24,A25,A31,A32,A34,A35}
    [5]  + 2*m^3*n	(A11*A12 + A21*A22 - A31*A32)	6{A11,A12,A21,A22,A31,A32}
    [6]  + n^2	(A15*A15 + A25*A25 - A35*A35)	3{A15,A25,A35}
    [7]  + 2*m*n^2	(A13*A14 + A12*A15 + A23*A24 + A22*A25 - A33*A34 - A32*A35)	12{A12,A13,A14,A15,A22,A23,A24,A25,A32,A33,A34,A35}
    [8]  + m^2*n^2	(A12*A12 + 2*A11*A13 + A22*A22 + 2*A21*A23 - A32*A32 - 2*A31*A33)	9{A11,A12,A13,A21,A22,A23,A31,A32,A33}
    [9]  + 2*n^3	(A13*A15 + A23*A25 - A33*A35)	6{A13,A15,A23,A25,A33,A35}
    [10]  + 2*m*n^3	(A12*A13 + A22*A23 - A32*A33)	6{A12,A13,A22,A23,A32,A33}
    [11]  + n^4	(A13*A13 + A23*A23 - A33*A33)	3{A13,A23,A33}
    minSize=3, maxSize=12
#---> nrows=3
#---> ncols=5
#---> isolated=a,b,c
#---> parameter=m,n
#---> rset0=a - A14*m - A11*m^2 - A15*n - A12*m*n - A13*n^2; b - A24*m - A21*m^2 - A25*n - A22*m*n - A23*n^2; c - A34*m - A31*m^2 - A35*n - A32*m*n - A33*n^2; a^2 + b^2 - c^2
#---> poly1=A14^2*m^2 + A24^2*m^2 - A34^2*m^2 + 2*A11*A14*m^3 + 2*A21*A24*m^3 - 2*A31*A34*m^3 + A11^2*m^4 + A21^2*m^4 - A31^2*m^4 + 2*A14*A15*m*n + 2*A24*A25*m*n - 2*A34*A35*m*n + 2*A12*A14*m^2*n + 2*A11*A15*m^2*n + 2*A22*A24*m^2*n + 2*A21*A25*m^2*n - 2*A32*A34*m^2*n - 2*A31*A35*m^2*n + 2*A11*A12*m^3*n + 2*A21*A22*m^3*n - 2*A31*A32*m^3*n + A15^2*n^2 + A25^2*n^2 - A35^2*n^2 + 2*A13*A14*m*n^2 + 2*A12*A15*m*n^2 + 2*A23*A24*m*n^2 + 2*A22*A25*m*n^2 - 2*A33*A34*m*n^2 - 2*A32*A35*m*n^2 + A12^2*m^2*n^2 + 2*A11*A13*m^2*n^2 + A22^2*m^2*n^2 + 2*A21*A23*m^2*n^2 - A32^2*m^2*n^2 - 2*A31*A33*m^2*n^2 + 2*A13*A15*n^3 + 2*A23*A25*n^3 - 2*A33*A35*n^3 + 2*A12*A13*m*n^3 + 2*A22*A23*m*n^3 - 2*A32*A33*m*n^3 + A13^2*n^4 + A23^2*n^4 - A33^2*n^4
#---> powerSum=a^2 + b^2 - c^2
#---> exponent=2
#---> pmat=[[A11,A12,A13,A14,A15],[A21,A22,A23,A24,A25],[A31,A32,A33,A34,A35]]
*/
int A11,A12,A13,A14,A15,A21,A22,A23,A24,A25,A31,A32,A33,A34,A35;
int sum0 = 0;
for (A14 = -2; A14 < 3; A14++)  {
for (A24 = -2; A24 < 3; A24++)  {
for (A34 = -2; A34 < 3; A34++)  {
if (A14*A14 + A24*A24 - A34*A34 == 0) /* [0], minSize = 3 */  {
for (A11 = -2; A11 < 3; A11++)  {
for (A21 = -2; A21 < 3; A21++)  {
for (A31 = -2; A31 < 3; A31++)  {
if (A11*A11 + A21*A21 - A31*A31 == 0) /* [2], minSize = 3 */  {
for (A15 = -2; A15 < 3; A15++)  {
for (A25 = -2; A25 < 3; A25++)  {
for (A35 = -2; A35 < 3; A35++)  {
if (A15*A15 + A25*A25 - A35*A35 == 0) /* [6], minSize = 3 */  {
for (A13 = -2; A13 < 3; A13++)  {
for (A23 = -2; A23 < 3; A23++)  {
for (A33 = -2; A33 < 3; A33++)  {
if (A13*A13 + A23*A23 - A33*A33 == 0) /* [11], minSize = 3 */  {
if (A11*A14 + A21*A24 - A31*A34 == 0) /* [1], minSize = 6 */  {
if (A14*A15 + A24*A25 - A34*A35 == 0) /* [3], minSize = 6 */  {
for (A12 = -2; A12 < 3; A12++)  {
/* check 1 */ int sum1 = (((((A11)*8+A12)*8+A13)*8+A14)*8+A15); 
for (A22 = -2; A22 < 3; A22++)  {
/* check 2 */ int sum2 = (((((A21)*8+A22)*8+A23)*8+A24)*8+A25); if (sum1 < sum2) {
for (A32 = -2; A32 < 3; A32++)  {
/* check 3 */ int sum3 = (((((A31)*8+A32)*8+A33)*8+A34)*8+A35); if (sum2 < sum3) {
if (A11*A12 + A21*A22 - A31*A32 == 0) /* [5], minSize = 6 */  {
if (A13*A15 + A23*A25 - A33*A35 == 0) /* [9], minSize = 6 */  {
if (A12*A13 + A22*A23 - A32*A33 == 0) /* [10], minSize = 6 */  {
if (A12*A12 + 2*A11*A13 + A22*A22 + 2*A21*A23 - A32*A32 - 2*A31*A33 == 0) /* [8], minSize = 9 */  {
if (A12*A14 + A11*A15 + A22*A24 + A21*A25 - A32*A34 - A31*A35 == 0) /* [4], minSize = 12 */  {
if (A13*A14 + A12*A15 + A23*A24 + A22*A25 - A33*A34 - A32*A35 == 0) /* [7], minSize = 12 */  {
if (A11 != 0 || A12 != 0 || A13 != 0 || A14 != 0 || A15 != 0) /* row 1 != 0 */  {
if (A21 != 0 || A22 != 0 || A23 != 0 || A24 != 0 || A25 != 0) /* row 2 != 0 */  {
if (A31 != 0 || A32 != 0 || A33 != 0 || A34 != 0 || A35 != 0) /* row 3 != 0 */  {
printf("[");
printf("[%d,%d,%d,%d,%d]",A11,A12,A13,A14,A15);
printf(",");
printf("[%d,%d,%d,%d,%d]",A21,A22,A23,A24,A25);
printf(",");
printf("[%d,%d,%d,%d,%d]",A31,A32,A33,A34,A35);
printf("]");
reslines ++;
printf("\n");
}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
printf("#---> reslines=%d\n", reslines);
} /* main */
#---> start of results ----
[[-2,-2,0,0,0],[0,-2,-1,0,0],[2,2,1,0,0]]
[[-2,2,0,0,0],[0,2,-1,0,0],[2,-2,1,0,0]]
[[-2,-2,0,0,0],[0,2,1,0,0],[2,2,1,0,0]]
[[-2,2,0,0,0],[0,-2,1,0,0],[2,-2,1,0,0]]
[[-1,-2,0,0,0],[0,-2,-2,0,0],[1,2,2,0,0]]
[[-1,2,0,0,0],[0,2,-2,0,0],[1,-2,2,0,0]]
[[-1,-2,0,0,0],[0,2,2,0,0],[1,2,2,0,0]]
[[-1,2,0,0,0],[0,-2,2,0,0],[1,-2,2,0,0]]
[[-1,0,1,0,0],[0,-2,0,0,0],[1,0,1,0,0]]
[[-1,0,1,0,0],[0,2,0,0,0],[1,0,1,0,0]]
[[0,-2,-2,0,0],[1,2,0,0,0],[1,2,2,0,0]]
[[0,2,-2,0,0],[1,-2,0,0,0],[1,-2,2,0,0]]
[[0,-2,0,0,0],[1,0,-1,0,0],[1,0,1,0,0]]
[[0,2,0,0,0],[1,0,-1,0,0],[1,0,1,0,0]]
[[0,-2,2,0,0],[1,-2,0,0,0],[1,-2,2,0,0]]
[[0,2,2,0,0],[1,2,0,0,0],[1,2,2,0,0]]
[[0,-2,-1,0,0],[2,2,0,0,0],[2,2,1,0,0]]
[[0,2,-1,0,0],[2,-2,0,0,0],[2,-2,1,0,0]]
[[0,-2,1,0,0],[2,-2,0,0,0],[2,-2,1,0,0]]
[[0,2,1,0,0],[2,2,0,0,0],[2,2,1,0,0]]
#---> reslines=20
